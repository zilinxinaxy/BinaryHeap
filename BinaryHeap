package cn.xiayi.abc;

import java.util.Iterator;

import org.omg.CORBA.portable.UnknownException;

/*
 * 二叉堆的实现
 */
public class BinaryHeap<AnyType extends Comparable<? super AnyType>> {
	private static final int DEFAULT_CAPACITY = 10;
	private int currentSize;
	private AnyType [] array;
	public BinaryHeap()
	{
		array = (AnyType [])new Comparable[DEFAULT_CAPACITY];
		currentSize = 0;
	}
	public BinaryHeap(AnyType [] items) {
		currentSize = items.length;
		array = (AnyType[]) new Comparable[(currentSize+2)*11/10];
		int i = 1;
		for (AnyType T:items)
		{
			array[i++] = T;
		}
		buildHeap();
	}
	
	private void buildHeap() {
		// TODO Auto-generated method stub
		for (int i = currentSize/2; i>0; i--) {
			percolateDown(i);
		}
	}
	public BinaryHeap(int size){
		array = (AnyType [])new Comparable[size];
		currentSize = 0;
	}
	public boolean isEmpty() {
		return currentSize == 0;
	}
	public AnyType deleteMin() {
		if(isEmpty())
			throw new UnknownException(null);
		AnyType min = array[1];
		array[1] = array[currentSize--];
		percolateDown(1);
		return min; 
	}

	// 按序号调整
	private void percolateDown(int hole) {
		int child;
		AnyType tmp = array[hole];
		for (; hole*2 <= currentSize; hole = child) {
			child= hole*2;
			if (child != currentSize && array[child + 1].compareTo(array[child])<0) {
				child ++;
			}else if (array[child].compareTo(tmp)<0) {
				array[hole] = array[child];
			}else {
				break;
			}
		}
		array[hole] = tmp;
	}
	private void enlargeArray(int newSize) {
		AnyType [] array_new = (AnyType [])new Comparable[newSize];
		for (int i = 0; i < array.length; i++) {
			array_new[i] = array[i];
		}
		array = array_new;
	}
	public void insert(AnyType x)
	{
		if (currentSize == array.length-1) {
			enlargeArray(array.length*2 + 1);
		}
		int hole = ++currentSize;
		for (array[0] = x;hole > 1 && x.compareTo(array[hole/2])<0;hole/=2)
			  array[hole] = array[ hole/2];
		array[hole] = x;	
	}

	public static void main(String[] args) {
		BinaryHeap b = new BinaryHeap<>();
		b.insert(4);
		b.insert(3);
		b.insert(5);
		b.insert(7);
		System.out.println(b.toString());
	}
}
